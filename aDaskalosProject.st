<?xml version="1.0"?>

<st-source>
<time-stamp>From VisualWorks® NonCommercial, 7.4.1 of 30.05.2006г. on 13.04.2024г. at 18:12:09.000</time-stamp>


<class>
<name>Osoba</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>jmeno prijmeni </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Osoba class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Osoba</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="jmeno">jmeno
"generated by Daskalos"

     ^jmeno</body>

<body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject
"generated by Daskalos"

     jmeno := (self checkValue: anObject forVariable: #jmeno)</body>

<body package="DaskalosUserClasses" selector="prijmeni">prijmeni
"generated by Daskalos"

     ^prijmeni</body>

<body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject
"generated by Daskalos"

     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body>
</methods>

<methods>
<class-id>Osoba</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     jmeno := nil.
     prijmeni := nil.
</body>
</methods>

<methods>
<class-id>Osoba</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="celeJmeno">celeJmeno
	^jmeno , ' ' , prijmeni</body>
</methods>


<class>
<name>Zakaznik</name>
<environment>Smalltalk</environment>
<super>Osoba</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>datumNakupu nakup </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Zakaznik class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#nakup -&gt; Core.List); add: (#datumNakupu -&gt; Core.Date); add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Zakaznik</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="datumNakupu">datumNakupu
"generated by Daskalos"

     ^datumNakupu</body>

<body package="DaskalosUserClasses" selector="datumNakupu:">datumNakupu: anObject
"generated by Daskalos"

     datumNakupu := (self checkValue: anObject forVariable: #datumNakupu)</body>

<body package="DaskalosUserClasses" selector="nakup">nakup
"generated by Daskalos"

     ^nakup</body>
</methods>

<methods>
<class-id>Zakaznik</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     datumNakupu := nil.
     nakup := List new.
</body>
</methods>

<methods>
<class-id>Zakaznik</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="jeZaruka">jeZaruka
	(Date today subtractDate: datumNakupu) / 365 &lt; 3 
		ifTrue: [^'V zaruce']
		ifFalse: [^'Neni v zaruce']</body>
</methods>


<class>
<name>Vlastnik</name>
<environment>Smalltalk</environment>
<super>Osoba</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>zodpovednost rokNarozeni </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Vlastnik class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#zodpovednost -&gt; Core.Object); add: (#rokNarozeni -&gt; Core.Number); add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Vlastnik</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="rokNarozeni">rokNarozeni
"generated by Daskalos"

     ^rokNarozeni</body>

<body package="DaskalosUserClasses" selector="rokNarozeni:">rokNarozeni: anObject
"generated by Daskalos"

     rokNarozeni := (self checkValue: anObject forVariable: #rokNarozeni)</body>

<body package="DaskalosUserClasses" selector="zodpovednost">zodpovednost
"generated by Daskalos"

     ^zodpovednost</body>

<body package="DaskalosUserClasses" selector="zodpovednost:">zodpovednost: anObject
"generated by Daskalos"

     zodpovednost := (self checkValue: anObject forVariable: #zodpovednost)</body>
</methods>

<methods>
<class-id>Vlastnik</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     zodpovednost := nil.
     rokNarozeni := nil.
</body>
</methods>

<methods>
<class-id>Vlastnik</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="vek">vek
	^Date today year - rokNarozeni</body>
</methods>


<class>
<name>VideoKarta</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>model cena vyrobce datumVyroby cenaPosleve </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>VideoKarta class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#vyrobce -&gt; Core.Object); add: (#cena -&gt; Core.Number); add: (#cenaPosleve -&gt; Core.Number); add: (#model -&gt; Core.String); add: (#datumVyroby -&gt; Core.Date); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>VideoKarta</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="cena">cena
"generated by Daskalos"

     ^cena</body>

<body package="DaskalosUserClasses" selector="cena:">cena: anObject
"generated by Daskalos"

     cena := (self checkValue: anObject forVariable: #cena)</body>

<body package="DaskalosUserClasses" selector="cenaPosleve">cenaPosleve
"generated by Daskalos"

     ^cenaPosleve</body>

<body package="DaskalosUserClasses" selector="cenaPosleve:">cenaPosleve: anObject
"generated by Daskalos"

     cenaPosleve := (self checkValue: anObject forVariable: #cenaPosleve)</body>

<body package="DaskalosUserClasses" selector="datumVyroby">datumVyroby
"generated by Daskalos"

     ^datumVyroby</body>

<body package="DaskalosUserClasses" selector="datumVyroby:">datumVyroby: anObject
"generated by Daskalos"

     datumVyroby := (self checkValue: anObject forVariable: #datumVyroby)</body>

<body package="DaskalosUserClasses" selector="model">model
"generated by Daskalos"

     ^model</body>

<body package="DaskalosUserClasses" selector="model:">model: anObject
"generated by Daskalos"

     model := (self checkValue: anObject forVariable: #model)</body>

<body package="DaskalosUserClasses" selector="vyrobce">vyrobce
"generated by Daskalos"

     ^vyrobce</body>

<body package="DaskalosUserClasses" selector="vyrobce:">vyrobce: anObject
"generated by Daskalos"

     vyrobce := (self checkValue: anObject forVariable: #vyrobce)</body>
</methods>

<methods>
<class-id>VideoKarta</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     model := nil.
     cena := nil.
     vyrobce := nil.
     datumVyroby := nil.
     cenaPosleve := nil.
</body>
</methods>

<methods>
<class-id>VideoKarta</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="jeZastarala">jeZastarala
	(Date today subtractDate: datumVyroby) / 365 &lt; 2 
		ifTrue: [^'Nova']
		ifFalse: [^'Zastarala']</body>

<body package="DaskalosUserClasses" selector="sleva:">sleva: procento 
	^cena * (1 - (procento / 100)) asFloat</body>
</methods>


<class>
<name>Firma</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>nazev country pocetPracovniku </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Firma class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#pocetPracovniku -&gt; Core.Number); add: (#nazev -&gt; Core.String); add: (#country -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Firma</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="country">country
"generated by Daskalos"

     ^country</body>

<body package="DaskalosUserClasses" selector="country:">country: anObject
"generated by Daskalos"

     country := (self checkValue: anObject forVariable: #country)</body>

<body package="DaskalosUserClasses" selector="nazev">nazev
"generated by Daskalos"

     ^nazev</body>

<body package="DaskalosUserClasses" selector="nazev:">nazev: anObject
"generated by Daskalos"

     nazev := (self checkValue: anObject forVariable: #nazev)</body>

<body package="DaskalosUserClasses" selector="pocetPracovniku">pocetPracovniku
"generated by Daskalos"

     ^pocetPracovniku</body>

<body package="DaskalosUserClasses" selector="pocetPracovniku:">pocetPracovniku: anObject
"generated by Daskalos"

     pocetPracovniku := (self checkValue: anObject forVariable: #pocetPracovniku)</body>
</methods>

<methods>
<class-id>Firma</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     nazev := nil.
     country := nil.
     pocetPracovniku := nil.
</body>
</methods>

<methods>
<class-id>Firma</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="velikost">velikost
	pocetPracovniku &lt;= 10000 ifTrue: [^'Mala'].
	pocetPracovniku &lt;= 50000 ifTrue: [^'Stredni'].
	^'Velka'</body>
</methods>


</st-source>
